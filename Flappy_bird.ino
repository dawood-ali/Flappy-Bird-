
//enjoy the game :)

#include <UTFTGLUE.h>
int not_gravity=0;//Core graphics
#include <Adafruit_GFX.h>
#include <TouchScreen.h>  //touchscreen library
#include <MCUFRIEND_kbv.h> //touchscreen specific library because it detects
//the kind of shield you are using which is really important


//The following are for fonts which are really important for fancy stuff:
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeSans12pt7b.h>
#include <Fonts/FreeSerif12pt7b.h>
#include <FreeDefaultFonts.h>


#define LCD_CS A3 //chip select is set to A3
#define LCD_CD A2 //command data goes to A2
#define LCD_WR A1 //writing to LCD is set to A1
#define LCD_RD A0 //lcd reading is set to A0
#define LCD_RST A4 //LCD resetting the screen.
#define button 45

MCUFRIEND_kbv tft{LCD_CS,LCD_CD,LCD_WR,LCD_RD,LCD_RST};
//Now here is a list of colours you might be interested in keeping in mind 

#define BLACK 0x0000
#define WHITE 0xFFFF
#define BLUE 0x001F
#define RED 0xF800
#define GREEN 0x07E0
#define CYAN 0x07FF
#define MAGENTA 0xF81F
#define YELLOW 0xFFE0
uint16_t back= tft.color565(113,197,208);
uint16_t obstacle_color= tft.color565(57,174,28);
int lives=3;
int text_printed_gameover=0;
int text_printed_running=0;
int text_printed_paused=0;
uint16_t color;
//Define PINS FOR RESISTIVE TOUCHSCREEN

#define YP A3 //input in the y
#define XM A2 // input in the x
#define YM 9 //output digital
#define XP 8 //output digital
#define minpressure 11036 
#define maxpressure 1000

int pixel_x=0;
int pixel_y=0;
uint16_t r;
uint16_t g;
uint16_t b;
const int TS_LEFT = 965, TS_RT = 95, TS_TOP = 926, TS_BOT = 107; 
int score=0;

TouchScreen ts=TouchScreen(XP,YP,XM,YM,300);
void font_message(uint16_t x, uint16_t y,uint16_t sizee,const GFXfont *f, const char *msg) {
  tft.setCursor(x,y);
  tft.setFont(f);
  tft.setTextSize(sizee);
  tft.print(msg);
}

enum GAME_STATE 
{MENU=0, RUNNING=1, PAUSED=2, GAME_OVER=4};

int current_state= MENU;
boolean buttonEnabled=true;

const uint16_t flappy[1050] PROGMEM={
0x763A, 0x767B, 0x767A, 0x6639, 0x6639, 0x665A, 0x665B, 0x663A, 0x765B, 0x761A, 0x7619, 0x7E18, 0x7E17, 0x8656, 0x8655, 0x7DF4,   // 0x0010 (16) pixels
0x8635, 0x85F6, 0x8DD9, 0x95BA, 0x9DFA, 0xA5F9, 0x95D6, 0x9E17, 0x9618, 0x7DB7, 0x863A, 0x7E5B, 0x65F8, 0x769A, 0x5DF8, 0x6E7A,   // 0x0020 (32) pixels
0x6E39, 0x7639, 0x7639, 0x6DF9, 0x6E19, 0x6E19, 0x6E39, 0x6E39, 0x6E5A, 0x6E5A, 0x6E3A, 0x6DD9, 0x75D9, 0x7DD9, 0x8E5A, 0x7555,   // 0x0030 (48) pixels
0x4C0F, 0x4C0E, 0x546E, 0x3B8B, 0x53EE, 0x5C11, 0x5370, 0x534F, 0x5BAF, 0x53AD, 0x538D, 0x53F0, 0x8E19, 0x75B8, 0x7E3A, 0x6E18,   // 0x0040 (64) pixels
0x5DD8, 0x6E7A, 0x6E7A, 0x6E39, 0x7639, 0x7639, 0x7E3B, 0x763A, 0x763A, 0x765A, 0x7679, 0x7659, 0x7618, 0x7E18, 0x8E5A, 0x9E9B,   // 0x0050 (80) pixels
0x9E5B, 0xA65B, 0x6C32, 0x2208, 0x1166, 0x2207, 0x2A66, 0x19E5, 0x21C8, 0x2A0A, 0x322A, 0x21A7, 0x1143, 0x2206, 0x32AA, 0x9E7A,   // 0x0060 (96) pixels
0x85D8, 0x75B8, 0x869B, 0x765A, 0x6E5A, 0x6E3A, 0x6E3A, 0x7639, 0x7639, 0x7E3B, 0x761A, 0x7619, 0x7618, 0x7618, 0x75F7, 0x7DD7,   // 0x0070 (112) pixels
0x85F7, 0x6CD4, 0x6C73, 0x7453, 0x7C53, 0x9D15, 0xA576, 0xA555, 0xA553, 0x9D92, 0xAE15, 0x7C51, 0x3A09, 0x6B8F, 0xBE18, 0xB5F5,   // 0x0080 (128) pixels
0x9D94, 0x8D54, 0x6CB3, 0x7556, 0x7597, 0x75F8, 0x7E7A, 0x65F8, 0x6E3A, 0x6E3A, 0x7639, 0x7639, 0x763B, 0x761A, 0x75F9, 0x7618,   // 0x0090 (144) pixels
0x7E18, 0x7E18, 0x8E18, 0x9639, 0x53AF, 0x2A09, 0x31E9, 0x31A7, 0xAD54, 0xFFDE, 0xFFFD, 0xFFBB, 0xFFFB, 0xFFFC, 0xAD54, 0x4A2A,   // 0x00A0 (160) pixels
0x9472, 0xFFDE, 0xF7DC, 0xEFDC, 0xC6B9, 0x0965, 0x53D0, 0x9E7A, 0x75D7, 0x7E59, 0x763A, 0x765A, 0x763A, 0x7639, 0x7639, 0x763B,   // 0x00B0 (176) pixels
0x763A, 0x7639, 0x7639, 0x7E39, 0x8618, 0x85D8, 0x8576, 0x6411, 0x530D, 0x636D, 0x632B, 0xC5F3, 0xFF98, 0xFF96, 0xFFD7, 0xEF56,   // 0x00C0 (192) pixels
0xDED7, 0xA4D3, 0x5A6A, 0x8C10, 0xF79D, 0xFFFD, 0xFFFD, 0xCEB9, 0x4B0B, 0x6411, 0x7D56, 0x7DB6, 0x8E5A, 0x7E3A, 0x761A, 0x7639,   // 0x00D0 (208) pixels
0x7639, 0x7639, 0x663A, 0x6639, 0x6E19, 0x6E19, 0x7619, 0x75B8, 0x5C73, 0x3B2F, 0xAE7B, 0xD77E, 0xE79C, 0xE758, 0xEF75, 0xEF30,   // 0x00E0 (224) pixels
0xEF0D, 0xF770, 0xA4EB, 0x5A66, 0x9C71, 0xEF1D, 0xFFDF, 0xFFFE, 0xF79B, 0xFFFD, 0xFFFE, 0xE77D, 0xA5D7, 0x32AB, 0x53EF, 0x8E18,   // 0x00F0 (240) pixels
0x7DF8, 0x7DF9, 0x7639, 0x7639, 0x7639, 0x665A, 0x6E7A, 0x765A, 0x7E5A, 0x865A, 0x7DD8, 0x4BF2, 0x1A0A, 0xAE5A, 0xEFFF, 0xE7BB,   // 0x0100 (256) pixels
0xFFF9, 0xEF91, 0xEF6C, 0xF789, 0xF76B, 0xAD4B, 0x41E3, 0xA4D2, 0xFFDF, 0xFF7E, 0xFFDE, 0xFFFE, 0xFFFC, 0xFFFE, 0xE77D, 0xC69A,   // 0x0110 (272) pixels
0x3249, 0x3B0C, 0xA679, 0x9E7A, 0x7DD8, 0x7619, 0x7639, 0x7639, 0x6E59, 0x6E18, 0x7638, 0x7E38, 0x85D7, 0x7D76, 0x74F5, 0x6C52,   // 0x0120 (288) pixels
0x9576, 0x9DB5, 0xA5D1, 0xC6B1, 0xB609, 0xDF29, 0xF7C7, 0xEF89, 0xB58A, 0x41E3, 0x9491, 0xFFDF, 0xF77E, 0xFFFF, 0xFFFE, 0xF7DD,   // 0x0130 (304) pixels
0xDEFA, 0x73AE, 0x94D3, 0xB618, 0x9D95, 0x4B6D, 0x5C10, 0x7DB7, 0x7E19, 0x6E39, 0x6E39, 0x6E18, 0x7618, 0x75D7, 0x64D2, 0x3B4C,   // 0x0140 (320) pixels
0x32AA, 0x3ACB, 0x4AEB, 0x3A88, 0x4B08, 0x3A63, 0xB5ED, 0xEFAF, 0xEFAA, 0xF7A6, 0xEF68, 0xA528, 0x4A43, 0x94D1, 0xF7BF, 0xF7DF,   // 0x0150 (336) pixels
0xF7DF, 0xEF9D, 0xFFFE, 0xCE79, 0x3186, 0x73AF, 0xEFBE, 0xC699, 0x19A5, 0x2A49, 0x9618, 0x7E19, 0x6E39, 0x6E39, 0x8619, 0x8E59,   // 0x0160 (352) pixels
0x7D75, 0x434B, 0x21E5, 0x3246, 0x3A46, 0x2163, 0x2983, 0x4244, 0x4242, 0xB5AC, 0xE72D, 0xEF2A, 0xFFA8, 0xFFAA, 0xAD47, 0x4221,   // 0x0170 (368) pixels
0x94D0, 0xE75D, 0xEFBF, 0xFFFF, 0xF7FE, 0xFFFF, 0xCE59, 0x39E7, 0x8410, 0xF7DF, 0xC678, 0x29E6, 0x3ACA, 0x8DB7, 0x7E19, 0x6E39,   // 0x0180 (384) pixels
0x6E39, 0x85B8, 0x5431, 0x53AE, 0x7CB0, 0x9D72, 0xAD92, 0xBDD3, 0xC614, 0xC614, 0xB591, 0xB58F, 0xA50A, 0x83E1, 0xC5A5, 0xF728,   // 0x0190 (400) pixels
0xFF6A, 0xB5A7, 0x3A00, 0xA52F, 0xF7FE, 0xE77D, 0xF7FF, 0xF7FF, 0xF7DE, 0xDEDB, 0x4208, 0x7BAF, 0xEF5D, 0xC678, 0x3227, 0x4B0B,   // 0x01A0 (416) pixels
0x8DD7, 0x7E18, 0x6E39, 0x6E39, 0x8598, 0x3B2E, 0x3269, 0x6BCD, 0x8C8F, 0x83EC, 0x83EC, 0xA4AF, 0x944D, 0x83CA, 0x83E9, 0x7343,   // 0x01B0 (432) pixels
0x6AE0, 0xC565, 0xFF08, 0xFF49, 0xAD44, 0x52A0, 0xA50C, 0xD6D7, 0xCED9, 0xF7DE, 0xF7FF, 0xFFFF, 0xDEBB, 0x62CC, 0x8C31, 0xEF7D,   // 0x01C0 (448) pixels
0xC658, 0x29E6, 0x3ACA, 0x85B6, 0x7618, 0x6E39, 0x6E39, 0x7D77, 0x438F, 0x2A29, 0x2A07, 0x4226, 0x4A26, 0x5225, 0x49E5, 0x49E5,   // 0x01D0 (464) pixels
0x5A66, 0x4A22, 0x83A5, 0xBD68, 0xCDA5, 0xE664, 0xFF06, 0xEF29, 0xD68B, 0xA50A, 0x5AE6, 0x8CAF, 0xEF9D, 0xF7DD, 0xF7BE, 0xF79E,   // 0x01E0 (480) pixels
0xD63A, 0xEF3D, 0xFFFF, 0xBE37, 0x3227, 0x430B, 0x85D6, 0x7618, 0x6E39, 0x6E39, 0x861A, 0x4BF1, 0x224A, 0x3248, 0x4248, 0x41E6,   // 0x01F0 (496) pixels
0x49E6, 0x5227, 0x41C6, 0x4A25, 0x41E2, 0x7BA5, 0xC5C8, 0xC582, 0xD600, 0xFFA6, 0xF727, 0xFFAD, 0x8C45, 0x2100, 0x7BEB, 0xF7BC,   // 0x0200 (512) pixels
0xFFFE, 0xFFFF, 0xFFFF, 0xFF9F, 0xFFBF, 0xFFDF, 0xC678, 0x2A06, 0x3ACA, 0x8E17, 0x7618, 0x6E39, 0x6E39, 0x75F9, 0x64F5, 0x4BCF,   // 0x0210 (528) pixels
0x3AAA, 0x31E8, 0x41E8, 0x4A08, 0x41C6, 0x5225, 0x49C1, 0x7304, 0x9405, 0xC587, 0xDE66, 0xDE61, 0xFF84, 0xF745, 0xFF69, 0xACE5,   // 0x0220 (544) pixels
0x7B64, 0xA4CD, 0xBDB3, 0xBD94, 0xD638, 0xC576, 0xD5F8, 0xCDB8, 0xC5B7, 0xBDB6, 0x3A07, 0x3228, 0x74D2, 0x7DF8, 0x7619, 0x7619,   // 0x0230 (560) pixels
0x6E39, 0x7618, 0x85B6, 0x5BCF, 0x3A4A, 0x39E8, 0x4A07, 0x62C7, 0x83A4, 0x83A1, 0xBCE6, 0xD588, 0xDDC8, 0xE667, 0xDEA3, 0xF7A4,   // 0x0240 (576) pixels
0xFF64, 0xF705, 0xF72B, 0xFF91, 0xBD0C, 0x4962, 0x59C5, 0x5986, 0x5146, 0x5987, 0x5986, 0x5985, 0x51C6, 0x49C6, 0x41C6, 0x3A08,   // 0x0250 (592) pixels
0x7CF4, 0x8E39, 0x8618, 0x6E5A, 0x7638, 0x85F6, 0x7D14, 0x426B, 0x39E9, 0x4A27, 0x942A, 0xC5C9, 0xCDC5, 0xE607, 0xDDA6, 0xD566,   // 0x0260 (608) pixels
0xBCE3, 0xCE42, 0xEF65, 0xF765, 0xFFA8, 0xDE87, 0xC568, 0xBCAA, 0x7A86, 0x7A27, 0x7A08, 0x8208, 0x8A08, 0x8207, 0x8206, 0x8247,   // 0x0270 (624) pixels
0x7A47, 0x7A48, 0x72AA, 0x73CF, 0x7CD3, 0x8555, 0x6E1B, 0x763A, 0x7DD8, 0x95D7, 0x3A4B, 0x39E8, 0x5246, 0x9CAA, 0xD66A, 0xD5E5,   // 0x0280 (640) pixels
0xDDE5, 0xEE27, 0xEE2A, 0x93A0, 0xC582, 0xF788, 0xEF47, 0xF78B, 0xAD04, 0x5A60, 0x8B66, 0xABCB, 0xAB8C, 0xBBAD, 0xC36C, 0xC34B,   // 0x0290 (656) pixels
0xCB4A, 0xCB6A, 0xCB6A, 0xC34A, 0xC34B, 0xBBAC, 0x93ED, 0x634B, 0x634B, 0x6E1C, 0x7E3B, 0x7DD8, 0x8DB7, 0x3A8C, 0x3A29, 0x4A46,   // 0x02A0 (672) pixels
0x83A6, 0xC5A6, 0xD605, 0xD5C4, 0xD585, 0xE5E9, 0x8B60, 0xD5C5, 0xFF4A, 0xF76B, 0xE6CA, 0xA4A5, 0x51C0, 0x7AA4, 0xABEB, 0xBBED,   // 0x02B0 (688) pixels
0xC3CD, 0xCBAC, 0xCB8B, 0xD3AB, 0xDBEB, 0xD3AB, 0xCB8B, 0xCB8C, 0xBBCD, 0x8BAC, 0x5267, 0x4246, 0x763D, 0x761B, 0x7DF9, 0x85D8,   // 0x02C0 (704) pixels
0x4B90, 0x3249, 0x4225, 0x62E3, 0xBD67, 0xDE26, 0xE627, 0xD5A6, 0xD567, 0x7AE0, 0xBCE2, 0xEE88, 0xC565, 0x8B80, 0x9BC4, 0x9365,   // 0x02D0 (720) pixels
0x8AE6, 0x82A6, 0x8267, 0x8227, 0x8A47, 0x8225, 0x8A66, 0x8A86, 0x7A46, 0x7247, 0x7AA9, 0x6AA9, 0x636B, 0x63EC, 0x7CF1, 0x7E1C,   // 0x02E0 (736) pixels
0x75FA, 0x7E1A, 0x8639, 0x6CD4, 0x2A29, 0x39E6, 0x62A4, 0xA4A7, 0xD609, 0xDE29, 0xAC83, 0x93A1, 0x8B20, 0xBCC1, 0xE5E5, 0x9B80,   // 0x02F0 (752) pixels
0x4920, 0x8AC1, 0xBC4A, 0x9B48, 0x6983, 0x6943, 0x6944, 0x7164, 0x6142, 0x6163, 0x6183, 0x5143, 0x51A5, 0x5A07, 0x39C6, 0x3AA9,   // 0x0300 (768) pixels
0x6CB1, 0x9637, 0x75F9, 0x7619, 0x6E18, 0x7E38, 0x7D97, 0x32CC, 0x31E7, 0x5246, 0x72E5, 0xBD4B, 0xC56A, 0x5A20, 0x4980, 0xCD66,   // 0x0310 (784) pixels
0xF665, 0xEDE4, 0xCCA5, 0x9AE2, 0xA325, 0xAB48, 0xA2E9, 0x8A07, 0x8A07, 0x9208, 0x9A48, 0x9207, 0x9247, 0x8A47, 0x7A26, 0x82A9,   // 0x0320 (800) pixels
0x7AA9, 0x49C6, 0x3AEB, 0x7576, 0x8E19, 0x75F8, 0x869A, 0x6E17, 0x7617, 0x7DF8, 0x4BD0, 0x3A2A, 0x41C7, 0x5205, 0x72E6, 0x93E9,   // 0x0330 (816) pixels
0x7B44, 0x8342, 0xFF0C, 0xEE44, 0xF624, 0xE546, 0xE52A, 0xB365, 0x7180, 0x9266, 0xBB6C, 0xCBAE, 0xC34D, 0xC36D, 0xBB2C, 0xC38D,   // 0x0340 (832) pixels
0xC3AC, 0xB38C, 0xBC0E, 0xA36C, 0x51E7, 0x328B, 0x7D97, 0x8619, 0x7639, 0x7638, 0x7678, 0x6E37, 0x7618, 0x6CF4, 0x3AAC, 0x39E9,   // 0x0350 (848) pixels
0x5249, 0x41A5, 0x5226, 0x7327, 0xACA9, 0xDE2A, 0xE623, 0xF643, 0xEDE5, 0xF5E9, 0xAB82, 0x71C0, 0x9284, 0xAB28, 0xD44F, 0xC38D,   // 0x0360 (864) pixels
0xCBCE, 0xBB2C, 0xCB8D, 0xCBEE, 0xC38C, 0xC3EE, 0xB38C, 0x6206, 0x4B0C, 0x5CD4, 0x85F8, 0x7639, 0x6E18, 0x7658, 0x6E37, 0x7E58,   // 0x0370 (880) pixels
0x7DB7, 0x4B6F, 0x31EA, 0x39C9, 0x3987, 0x41E8, 0x4A05, 0x7B46, 0xCD89, 0xE626, 0xE603, 0xE5E4, 0xEE06, 0xD566, 0xCD28, 0xBC69,   // 0x0380 (896) pixels
0x7243, 0x7205, 0x71E6, 0x71C7, 0x71C7, 0x79E7, 0x71E7, 0x69C5, 0x69E5, 0x7226, 0x62C9, 0x6C92, 0x7576, 0x8638, 0x763A, 0x6E19,   // 0x0390 (912) pixels
0x7659, 0x6E38, 0x7638, 0x8638, 0x64B2, 0x430D, 0x3A6B, 0x3A0A, 0x420A, 0x41C6, 0x62A6, 0xB4EA, 0xDE29, 0xDDE5, 0xDE05, 0xD5C4,   // 0x03A0 (928) pixels
0xDE08, 0xE6AD, 0xB50A, 0x41C1, 0x3982, 0x41E6, 0x41C6, 0x4A08, 0x39E7, 0x31C7, 0x3A28, 0x29E6, 0x42A9, 0x7CF2, 0x85F7, 0x7E38,   // 0x03B0 (944) pixels
0x7E38, 0x6E3B, 0x6E1A, 0x765A, 0x765A, 0x6DF8, 0x7E38, 0x7DD7, 0x7514, 0x53AF, 0x3A8C, 0x3A0A, 0x41E8, 0x5246, 0x7B67, 0x9C46,   // 0x03C0 (960) pixels
0xA444, 0xACA3, 0x9C42, 0x9C64, 0x9CA8, 0x73A7, 0x4AC6, 0x5B8B, 0x5BAD, 0x430C, 0x430D, 0x32AB, 0x330C, 0x438E, 0x334C, 0x3BCD,   // 0x03D0 (976) pixels
0x75B5, 0x8639, 0x7E39, 0x7638, 0x6E5B, 0x661A, 0x6E3B, 0x763B, 0x6DF9, 0x75F8, 0x8658, 0x8637, 0x7534, 0x53AE, 0x3A6B, 0x3A09,   // 0x03E0 (992) pixels
0x41C7, 0x49E5, 0x5243, 0x5A42, 0x5A41, 0x5A42, 0x5263, 0x4A85, 0x42A7, 0x6C4F, 0x8DB6, 0x7D55, 0x7D77, 0x6D15, 0x64F5, 0x7576,   // 0x03F0 (1008) pixels
0x75B6, 0x7595, 0x75D5, 0x8658, 0x7DF9, 0x75F9, 0x75F9, 0x6E7B, 0x661A, 0x65DA, 0x763C, 0x763B, 0x75F8, 0x7E38, 0x7E37, 0x8617,   // 0x0400 (1024) pixels
0x6CF3, 0x42EC, 0x3A09, 0x41E8, 0x49E6, 0x4A05, 0x49C3, 0x49A2, 0x51E4, 0x4A05, 0x3A06, 0x3A89, 0x74D3, 0x9639, 0x85D8, 0x8619,   // 0x0410 (1040) pixels
};



void setup() {
  Serial.begin(9600);
  pinMode(button,INPUT);
  digitalWrite(button,HIGH);
  tft.reset();
  uint16_t ID=tft.readID();
  tft.begin(ID);
  tft.setRotation(1);
  tft.fillScreen(BLACK);
  delay(20);
  tft.setCursor(0,20);
  tft.setTextSize(3);
  tft.setTextColor(WHITE);
  font_message(20,50,3,&FreeSans9pt7b,"Flappy Bird Game");
  for(int i=0; i<5;i++) {
    tft.drawFastHLine(10,70+i,449,RED);
  }
  tft.fillRoundRect(20,90,80,50,10,GREEN);
  tft.setTextSize(2);
  tft.setTextColor(BLACK);
  tft.setCursor(20,130);
  tft.print("Start");
}

boolean cant_touch_this(){
  TSPoint p=ts.getPoint();
  if (p.z>0) {
    return true;
  }
  else {
    return false;
  }
}
boolean detect_collision(int x_obstacle,int ratio,int y_flappy) {
  int ratio_decimal_top= (double(ratio)/double(260))*140;
  int ratio_decimal_bottom= 185-int(ratio_decimal_top);
  //the basic case is where the bird touches the first corners/walls that it faces
  //the bird is located at 50 pixels. his mouth can hit the obstacle if we check for 50+ width of the picture
  if ((x_obstacle<=85) && ((x_obstacle+75)>=85) && (ratio_decimal_top>=(y_flappy-3))) {
    return true;
  }
  else if (x_obstacle<=85 && ((x_obstacle+77)>=85) && ((ratio_decimal_top+75)<=(y_flappy+26))) {
    return true;
  }
  else{
    return false;
  }
}
void drawObstacle(int i, int ratio) {
  float ratio_decimal_top= (double(ratio)/double(260))*140;
  float ratio_decimal_bottom= 185-int(ratio_decimal_top);
  tft.fillRect(i,0,75,int(ratio_decimal_top),obstacle_color);
  tft.drawRect(i-1,0,75+2,int(ratio_decimal_top)+1,BLACK);
  tft.fillRect(i,int(ratio_decimal_top)+75,75,int(ratio_decimal_bottom),obstacle_color);
  tft.drawRect(i-1,int(ratio_decimal_top)+75,75+2,int(ratio_decimal_bottom),BLACK);
  
}

void loop() {
  while(current_state==MENU) {
    TSPoint p= ts.getPoint();
    if (p.z>0) {
     //this took over 4 hours to wrap my head around
      pixel_x = map(p.y,TS_RT,TS_LEFT,480,0);
      pixel_y = map(p.x, TS_TOP, TS_BOT, 0, 320);
    }
  
    if (pixel_x>20 && pixel_x<100 && pixel_y>90 && pixel_y<140) {
      tft.reset();
      uint16_t ID= tft.readID();
      tft.begin(ID);
      tft.setRotation(1);
      current_state=PAUSED;
    }

}
  while(current_state==PAUSED && text_printed_paused==0) {
    tft.reset();
    uint16_t ID= tft.readID();
    tft.begin(ID);
    tft.setRotation(1);
    tft.fillRect(0,0,560,260,back);
    color= tft.color565(r=190,g=190,b=124);
    tft.fillRect(0,280,560,40,color);
    tft.fillRect(0,260,560,20,BLACK);
    tft.setCursor(65,150);
    tft.setTextSize(2);
    tft.setTextColor(WHITE);
    tft.print("Press to play");
    text_printed_paused++;
  }
  while(current_state==PAUSED && text_printed_paused==1) {
    TSPoint p= ts.getPoint();
    if (p.z>0) {
      current_state=RUNNING;
      text_printed_running=0;
    }
  }
  int i=485;
  int y=100;
  randomSeed(analogRead(6));
  int ratio= random(0,261);
  while (current_state==RUNNING && text_printed_running==0) {
    tft.reset();
    uint16_t ID= tft.readID();
    tft.begin(ID);
    tft.setRotation(1);
    tft.fillRect(0,0,560,260,back);
    color= tft.color565(r=190,g=190,b=124);
    tft.fillRect(0,280,560,40,color);
    tft.setCursor(5,295);
    tft.setTextSize(1);
    tft.setTextColor(BLACK);
    tft.print("Score: ");
    tft.setCursor(5,310);
    tft.print("Lives: ");
    tft.fillRect(0,260,560,20,BLACK);
    text_printed_running++;
  }
  while(current_state==RUNNING && text_printed_running==1) {
    if(digitalRead(button)==LOW) {
      y=y-10;
      delay(20);
    }
    drawObstacle(i,ratio);
    int ratio_top_refresh= (double(ratio)/double(260))*140;
    int ratio_bot_refresh= 185-int(ratio_top_refresh);
    tft.fillRect(50,y-4,35,4,back);
    tft.drawRGBBitmap(50,y,flappy,35,30);
    bool check_hit=detect_collision(i,ratio,y);
    tft.fillRect(50,y+30,35,5,back);
    tft.fillRect(i+77,0,25,ratio_top_refresh+1,back);
    tft.fillRect(i+77,int(ratio_top_refresh)+75,25,int(ratio_bot_refresh),back);
    //tft.fillRect(i-26,0,25,ratio_top_refresh,back);
    //tft.fillRect(i-26,int(ratio_top_refresh)+75,25,ratio_bot_refresh,back);
    i=i-10;
    y=y+5;
    not_gravity=0;
    if (y>=225) {
       tft.fillRect(50,y-5,35,35,back);
       lives= lives-1;
       score=0;
       current_state=PAUSED;
       text_printed_running=0;
       text_printed_paused=0;
       text_printed_gameover=0;
       y=100;
     }
    if (check_hit==true) {
       tft.fillRect(50,y-5,35,35,back);
       lives= lives-1;
       score=0;
       current_state=PAUSED;
       text_printed_running=0;
       text_printed_paused=0;
       text_printed_gameover=0;
       y=100;
    }
    if (i==-95) {
       i=485;
       randomSeed(analogRead(6));
       ratio=random(0,261);
       score=score+1;
       tft.setCursor(55,295);
       color=tft.color565(190,190,124);
       tft.setTextColor(BLACK,color);
       tft.setTextSize(1);
       tft.fillRect(52,280,428,15,color);
       tft.print(score);
       delay(10);
      }
    if (lives==0) {
      current_state=GAME_OVER;  
    }
    tft.setCursor(55,310);
    tft.setTextColor(BLUE,color);
    tft.setTextSize(1);
    tft.print(lives);
  }
  while (current_state==GAME_OVER && text_printed_gameover==0) {
  
    tft.fillScreen(BLACK);
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.setCursor(100,75);
    tft.print("Game Over");
    tft.setCursor(80,110);
    tft.print("Click anywhere to retry");
    text_printed_gameover++;
  while (current_state==GAME_OVER && text_printed_gameover==1) {
    TSPoint u= ts.getPoint();
    if (u.z>0) {
      current_state=PAUSED;
      lives=3;
      text_printed_gameover=0;
      text_printed_paused=0;
    }
  }
  }
}
